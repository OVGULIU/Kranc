# File produced by Kranc


if (other_timelevels == 1)
{
  STORAGE: uF_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: uLeft_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: uR_group[1]
}

if (timelevels == 1)
{
  STORAGE: u_group[1]
}
if (timelevels == 2)
{
  STORAGE: u_group[2]
}
if (timelevels == 3)
{
  STORAGE: u_group[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: u_grouprhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: u_grouprhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: u_grouprhs[3]
}

schedule Burgers_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule Burgers_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule Burgers_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"


if (CCTK_EQUALS(initial_data, "sine"))
{
  schedule burgers_initial_sine at CCTK_INITIAL as burgers_initial
  {
    LANG: C
  } "burgers_initial_sine"
}


if (CCTK_EQUALS(initial_data, "shock"))
{
  schedule burgers_initial_shock at CCTK_INITIAL as burgers_initial
  {
    LANG: C
  } "burgers_initial_shock"
}

schedule burgers_zero_rhs in MoL_CalcRHS
{
  LANG: C
} "burgers_zero_rhs"

schedule group burgers_reconstruct_1_group in MoL_CalcRHS after burgers_zero_rhs
{
  # no language specified
} "burgers_reconstruct_1"

schedule burgers_reconstruct_1 in burgers_reconstruct_1_group
{
  LANG: C
} "burgers_reconstruct_1"

schedule burgers_reconstruct_1_SelectBCs in burgers_reconstruct_1_bc_group
{
  LANG: C
  OPTIONS: level
  SYNC: uLeft_group
  SYNC: uR_group
} "burgers_reconstruct_1_SelectBCs"

schedule group ApplyBCs as burgers_reconstruct_1_ApplyBCs in burgers_reconstruct_1_bc_group after burgers_reconstruct_1_SelectBCs
{
  # no language specified
} "Apply BCs for groups set in burgers_reconstruct_1"

schedule group burgers_reconstruct_1_bc_group in burgers_reconstruct_1_group after burgers_reconstruct_1
{
  # no language specified
} "burgers_reconstruct_1"

schedule group burgers_reconstruct_1_bc_group in MoL_PseudoEvolutionBoundaries after MoL_PostStep
{
  # no language specified
} "burgers_reconstruct_1"

schedule group burgers_flux_1_group in MoL_CalcRHS after burgers_reconstruct_1
{
  # no language specified
} "burgers_flux_1"

schedule burgers_flux_1 in burgers_flux_1_group
{
  LANG: C
} "burgers_flux_1"

schedule burgers_flux_1_SelectBCs in burgers_flux_1_bc_group
{
  LANG: C
  OPTIONS: level
  SYNC: uF_group
} "burgers_flux_1_SelectBCs"

schedule group ApplyBCs as burgers_flux_1_ApplyBCs in burgers_flux_1_bc_group after burgers_flux_1_SelectBCs
{
  # no language specified
} "Apply BCs for groups set in burgers_flux_1"

schedule group burgers_flux_1_bc_group in burgers_flux_1_group after burgers_flux_1
{
  # no language specified
} "burgers_flux_1"

schedule group burgers_flux_1_bc_group in MoL_PseudoEvolutionBoundaries after MoL_PostStep
{
  # no language specified
} "burgers_flux_1"

schedule burgers_rhs_1 in MoL_CalcRHS after burgers_flux_1
{
  LANG: C
} "burgers_rhs_1"

schedule Burgers_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: u_group
} "select boundary conditions"

schedule Burgers_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule group ApplyBCs as Burgers_ApplyBCs in MoL_PostStep after Burgers_SelectBoundConds
{
  # no language specified
} "Apply boundary conditions controlled by thorn Boundary"
