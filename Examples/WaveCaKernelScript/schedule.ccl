# File produced by Kranc


if (timelevels == 1)
{
  STORAGE: phi_group[1]
}
if (timelevels == 2)
{
  STORAGE: phi_group[2]
}
if (timelevels == 3)
{
  STORAGE: phi_group[3]
}

if (timelevels == 1)
{
  STORAGE: pi_group[1]
}
if (timelevels == 2)
{
  STORAGE: pi_group[2]
}
if (timelevels == 3)
{
  STORAGE: pi_group[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: phi_grouprhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: phi_grouprhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: phi_grouprhs[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: pi_grouprhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: pi_grouprhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: pi_grouprhs[3]
}

schedule WaveCaKernelScript_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule WaveCaKernelScript_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"

schedule CAKERNEL_Launch_initial_gaussian_calc at initial
{
  LANG: C
  TAGS: Device=1
  READS:    grid::coordinates
  WRITES:   WaveCaKernelScript::phi_group
  WRITES:   WaveCaKernelScript::pi_group
} "initial_gaussian_calc"

schedule CAKERNEL_Launch_calc_rhs in MoL_CalcRHS
{
  LANG: C
  TAGS: Device=1
  READS:    WaveCaKernelScript::pi_group
  WRITES:   WaveCaKernelScript::phi_grouprhs
  WRITES:   WaveCaKernelScript::pi_grouprhs
} "calc_rhs"

schedule CAKERNEL_Launch_calc_bound_rhs in MoL_RHSBoundaries
{
  LANG: C
  TAGS: Device=1
  READS:    grid::coordinates
  WRITES:   WaveCaKernelScript::phi_grouprhs
  WRITES:   WaveCaKernelScript::pi_grouprhs
} "calc_bound_rhs"

schedule WaveCaKernelScript_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: phi_group
  SYNC: pi_group
} "select boundary conditions"

schedule WaveCaKernelScript_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule WaveCaKernelScript_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule group ApplyBCs as WaveCaKernelScript_ApplyBCs in MoL_PostStep after WaveCaKernelScript_SelectBoundConds
{
  # no language specified
} "Apply boundary conditions controlled by thorn Boundary"
