# File produced by Kranc


if (other_timelevels == 1)
{
  STORAGE: DenF_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: DenLeft_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: DenRight_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: EnF_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: EnLeft_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: EnRight_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: p_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: pLeft_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: pRight_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: rho_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: rhoLeft_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: rhoRight_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: SF_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: SLeft_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: SRight_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: v_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: vLeft_group[1]
}

if (other_timelevels == 1)
{
  STORAGE: vRight_group[1]
}

if (timelevels == 1)
{
  STORAGE: Den_group[1]
}
if (timelevels == 2)
{
  STORAGE: Den_group[2]
}
if (timelevels == 3)
{
  STORAGE: Den_group[3]
}

if (timelevels == 1)
{
  STORAGE: En_group[1]
}
if (timelevels == 2)
{
  STORAGE: En_group[2]
}
if (timelevels == 3)
{
  STORAGE: En_group[3]
}

if (timelevels == 1)
{
  STORAGE: S_group[1]
}
if (timelevels == 2)
{
  STORAGE: S_group[2]
}
if (timelevels == 3)
{
  STORAGE: S_group[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: Den_grouprhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: Den_grouprhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: Den_grouprhs[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: En_grouprhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: En_grouprhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: En_grouprhs[3]
}

if (rhs_timelevels == 1)
{
  STORAGE: S_grouprhs[1]
}
if (rhs_timelevels == 2)
{
  STORAGE: S_grouprhs[2]
}
if (rhs_timelevels == 3)
{
  STORAGE: S_grouprhs[3]
}

schedule Euler_Startup at STARTUP
{
  LANG: C
  OPTIONS: meta
} "create banner"

schedule Euler_RegisterSymmetries in SymmetryRegister
{
  LANG: C
  OPTIONS: meta
} "register symmetries"


if (CCTK_EQUALS(initial_data, "shock"))
{
  schedule euler_initial_shock at CCTK_INITIAL as euler_initial
  {
    LANG: C
    READS:    grid::x(Everywhere)
    WRITES:   Euler::p(Everywhere)
    WRITES:   Euler::rho(Everywhere)
    WRITES:   Euler::v1(Everywhere)
    WRITES:   Euler::v2(Everywhere)
    WRITES:   Euler::v3(Everywhere)
  } "euler_initial_shock"
}

schedule euler_primitives in MoL_PostStep after Euler_ApplyBCs
{
  LANG: C
  READS:    Euler::Den(Everywhere)
  READS:    Euler::En(Everywhere)
  READS:    Euler::S1(Everywhere)
  READS:    Euler::S2(Everywhere)
  READS:    Euler::S3(Everywhere)
  WRITES:   Euler::p(Everywhere)
  WRITES:   Euler::rho(Everywhere)
  WRITES:   Euler::v1(Everywhere)
  WRITES:   Euler::v2(Everywhere)
  WRITES:   Euler::v3(Everywhere)
} "euler_primitives"

schedule euler_conserved at INITIAL after euler_initial
{
  LANG: C
  READS:    Euler::p(Everywhere)
  READS:    Euler::rho(Everywhere)
  READS:    Euler::v1(Everywhere)
  READS:    Euler::v2(Everywhere)
  READS:    Euler::v3(Everywhere)
  WRITES:   Euler::Den(Everywhere)
  WRITES:   Euler::En(Everywhere)
  WRITES:   Euler::S1(Everywhere)
  WRITES:   Euler::S2(Everywhere)
  WRITES:   Euler::S3(Everywhere)
} "euler_conserved"

schedule euler_zero_rhs in MoL_CalcRHS
{
  LANG: C
  WRITES:   Euler::Denrhs(Everywhere)
  WRITES:   Euler::Enrhs(Everywhere)
  WRITES:   Euler::S1rhs(Everywhere)
  WRITES:   Euler::S2rhs(Everywhere)
  WRITES:   Euler::S3rhs(Everywhere)
} "euler_zero_rhs"

schedule group euler_reconstruct_1_group in MoL_CalcRHS after euler_zero_rhs
{
} "euler_reconstruct_1"

schedule euler_reconstruct_1 in euler_reconstruct_1_group
{
  LANG: C
  READS:    Euler::p(Everywhere)
  READS:    Euler::rho(Everywhere)
  READS:    Euler::v1(Everywhere)
  READS:    Euler::v2(Everywhere)
  READS:    Euler::v3(Everywhere)
  WRITES:   Euler::pLeft(Interior)
  WRITES:   Euler::pRight(Interior)
  WRITES:   Euler::rhoLeft(Interior)
  WRITES:   Euler::rhoRight(Interior)
  WRITES:   Euler::vLeft1(Interior)
  WRITES:   Euler::vLeft2(Interior)
  WRITES:   Euler::vLeft3(Interior)
  WRITES:   Euler::vRight1(Interior)
  WRITES:   Euler::vRight2(Interior)
  WRITES:   Euler::vRight3(Interior)
} "euler_reconstruct_1"

schedule euler_reconstruct_1_SelectBCs in euler_reconstruct_1_bc_group
{
  LANG: C
  OPTIONS: level
  SYNC: pLeft_group
  SYNC: pRight_group
  SYNC: rhoLeft_group
  SYNC: rhoRight_group
  SYNC: vLeft_group
  SYNC: vRight_group
} "euler_reconstruct_1_SelectBCs"

schedule group ApplyBCs as euler_reconstruct_1_ApplyBCs in euler_reconstruct_1_bc_group after euler_reconstruct_1_SelectBCs
{
} "Apply BCs for groups set in euler_reconstruct_1"

schedule group euler_reconstruct_1_bc_group in euler_reconstruct_1_group after euler_reconstruct_1
{
} "euler_reconstruct_1"

schedule group euler_reconstruct_1_bc_group in MoL_PseudoEvolutionBoundaries after MoL_PostStep
{
} "euler_reconstruct_1"

schedule euler_conserved_flux_1 in MoL_CalcRHS after euler_reconstruct_1
{
  LANG: C
  READS:    Euler::pLeft(Everywhere)
  READS:    Euler::pRight(Everywhere)
  READS:    Euler::rhoLeft(Everywhere)
  READS:    Euler::rhoRight(Everywhere)
  READS:    Euler::vLeft1(Everywhere)
  READS:    Euler::vLeft2(Everywhere)
  READS:    Euler::vLeft3(Everywhere)
  READS:    Euler::vRight1(Everywhere)
  READS:    Euler::vRight2(Everywhere)
  READS:    Euler::vRight3(Everywhere)
  WRITES:   Euler::DenLeft(Everywhere)
  WRITES:   Euler::DenRight(Everywhere)
  WRITES:   Euler::EnLeft(Everywhere)
  WRITES:   Euler::EnRight(Everywhere)
  WRITES:   Euler::SLeft1(Everywhere)
  WRITES:   Euler::SLeft2(Everywhere)
  WRITES:   Euler::SLeft3(Everywhere)
  WRITES:   Euler::SRight1(Everywhere)
  WRITES:   Euler::SRight2(Everywhere)
  WRITES:   Euler::SRight3(Everywhere)
} "euler_conserved_flux_1"

schedule group euler_flux_1_group in MoL_CalcRHS after euler_conserved_flux_1
{
} "euler_flux_1"

schedule euler_flux_1 in euler_flux_1_group
{
  LANG: C
  READS:    Euler::DenLeft(Everywhere)
  READS:    Euler::DenRight(Everywhere)
  READS:    Euler::EnLeft(Everywhere)
  READS:    Euler::EnRight(Everywhere)
  READS:    Euler::pLeft(Everywhere)
  READS:    Euler::pRight(Everywhere)
  READS:    Euler::rhoLeft(Everywhere)
  READS:    Euler::rhoRight(Everywhere)
  READS:    Euler::SLeft1(Everywhere)
  READS:    Euler::SLeft2(Everywhere)
  READS:    Euler::SLeft3(Everywhere)
  READS:    Euler::SRight1(Everywhere)
  READS:    Euler::SRight2(Everywhere)
  READS:    Euler::SRight3(Everywhere)
  READS:    Euler::vLeft1(Everywhere)
  READS:    Euler::vLeft2(Everywhere)
  READS:    Euler::vLeft3(Everywhere)
  READS:    Euler::vRight1(Everywhere)
  READS:    Euler::vRight2(Everywhere)
  READS:    Euler::vRight3(Everywhere)
  WRITES:   Euler::DenF(Interior)
  WRITES:   Euler::EnF(Interior)
  WRITES:   Euler::SF1(Interior)
  WRITES:   Euler::SF2(Interior)
  WRITES:   Euler::SF3(Interior)
} "euler_flux_1"

schedule euler_flux_1_SelectBCs in euler_flux_1_bc_group
{
  LANG: C
  OPTIONS: level
  SYNC: DenF_group
  SYNC: EnF_group
  SYNC: SF_group
} "euler_flux_1_SelectBCs"

schedule group ApplyBCs as euler_flux_1_ApplyBCs in euler_flux_1_bc_group after euler_flux_1_SelectBCs
{
} "Apply BCs for groups set in euler_flux_1"

schedule group euler_flux_1_bc_group in euler_flux_1_group after euler_flux_1
{
} "euler_flux_1"

schedule group euler_flux_1_bc_group in MoL_PseudoEvolutionBoundaries after MoL_PostStep
{
} "euler_flux_1"

schedule euler_rhs_1 in MoL_CalcRHS after euler_flux_1
{
  LANG: C
  READS:    Euler::DenF(Everywhere)
  READS:    Euler::EnF(Everywhere)
  READS:    Euler::SF1(Everywhere)
  READS:    Euler::SF2(Everywhere)
  READS:    Euler::SF3(Everywhere)
  READS:    Euler::Denrhs(Everywhere)
  READS:    Euler::Enrhs(Everywhere)
  READS:    Euler::S1rhs(Everywhere)
  READS:    Euler::S2rhs(Everywhere)
  READS:    Euler::S3rhs(Everywhere)
  WRITES:   Euler::Denrhs(Interior)
  WRITES:   Euler::Enrhs(Interior)
  WRITES:   Euler::S1rhs(Interior)
  WRITES:   Euler::S2rhs(Interior)
  WRITES:   Euler::S3rhs(Interior)
} "euler_rhs_1"

schedule Euler_SelectBoundConds in MoL_PostStep
{
  LANG: C
  OPTIONS: level
  SYNC: Den_group
  SYNC: En_group
  SYNC: S_group
} "select boundary conditions"

schedule Euler_CheckBoundaries at BASEGRID
{
  LANG: C
  OPTIONS: meta
} "check boundaries treatment"

schedule Euler_RegisterVars in MoL_Register
{
  LANG: C
  OPTIONS: meta
} "Register Variables for MoL"

schedule group ApplyBCs as Euler_ApplyBCs in MoL_PostStep after Euler_SelectBoundConds
{
} "Apply boundary conditions controlled by thorn Boundary"
